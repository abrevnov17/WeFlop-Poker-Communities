package com.weflop.Game;

import java.time.Instant;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.web.socket.WebSocketSession;

import com.weflop.Cards.Card;
import com.weflop.GameService.Database.DomainObjects.ActionPOJO;
import com.weflop.GameService.Database.DomainObjects.CardPOJO;

/**
 * Actions have an associated type and an optional parameter value (as some
 * actions such as raising have an associated float payload).
 * 
 * @author abrevnov
 *
 */
public class Action {
	// mandatory values
	private ActionType type;

	// optional values
	private String playerId; // user associated with action
	private WebSocketSession session; // session associated with action
	private Float value; // some actions have associated float as payload
	private Integer slot; // some actions have associated integer slot value as payload
	private List<Card> cards; // some actions have associated cards as payload
	private List<String> playerIds; // some actions have associated lists of player ids as payload
	private List<Float> pots; // some actions have associated lists of float values
	
	// automatically set values
	private Instant timestamp;

	public static class ActionBuilder {
		private ActionType type;
		private String playerId;
		private WebSocketSession session;
		private Float value;
		private Integer slot;
		private List<Card> cards;
		private List<String> playerIds;
		private Instant timestamp;
		private List<Float> pots;

		/* Constructors */

		public ActionBuilder(ActionType type) {
			this.type = type;
			this.timestamp = Instant.now();
		}

		public ActionBuilder withPlayerId(String playerId){
			this.playerId = playerId;
			return this;
		}

		public ActionBuilder withSession(WebSocketSession session){
			this.session = session;
			return this;
		}

		public ActionBuilder withValue(Float value){
			this.value = value;
			return this;
		}

		public ActionBuilder withSlot(Integer slot){
			this.slot = slot;
			return this;
		}

		public ActionBuilder withCards(List<Card> cards){
			this.cards = cards;
			return this;
		}

		public ActionBuilder withPlayerIds(List<String> playerIds){
			this.playerIds = playerIds;
			return this;
		}
		
		public ActionBuilder withPots(List<Float> pots) {
			this.pots = pots;
			return this;
		}
		
		public Action build(){
            Action action = new Action();
            action.type = this.type;
            action.timestamp = this.timestamp;
            action.playerId = this.playerId;
            action.session = this.session;
            action.value = this.value;
            action.slot = this.slot;
            action.cards = this.cards;
            action.playerIds = this.playerIds;
            action.pots = this.pots;
            return action;
        }
	}
	
	private Action() { }

	/* Methods */

	/**
	 * Provides POJO representation of Action (consumable by database).
	 * 
	 * @return Corresponding ActionPOJO instance
	 */
	public ActionPOJO toPojo() {
		List<CardPOJO> cards = this.cards == null ? null : this.cards.stream()
				.map(card -> new CardPOJO(card.getSuit().getValue(), card.getCardValue().getValue()))
				.collect(Collectors.toList());
		return new ActionPOJO(type.getValue(), playerId, timestamp != null ? timestamp.toEpochMilli() : null, 
				value, cards, playerIds, slot, pots);
	}

	/**
	 * Returns a boolean indicating whether this action was created by a user (or,
	 * alternatively, an outgoing action generated by the game server).
	 * 
	 * @returns True if user action, false otherwise
	 */
	public boolean isUserAction() {
		return !(this.type == ActionType.PLAYER_DEAL 
				|| this.type == ActionType.CENTER_DEAL
				|| this.type == ActionType.POT_WON 
				|| this.type != ActionType.SMALL_BLIND 
				|| this.type != ActionType.BIG_BLIND);
	}

	/* Getters and Setters */

	public ActionType getType() {
		return type;
	}

	public void setType(ActionType type) {
		this.type = type;
	}

	public Float getValue() {
		return value;
	}

	public void setValue(Float value) {
		this.value = value;
	}

	public String getPlayerId() {
		return playerId;
	}

	public void setPlayerId(String playerId) {
		this.playerId = playerId;
	}

	public WebSocketSession getSession() {
		return session;
	}

	public void setSession(WebSocketSession session) {
		this.session = session;
	}

	public Instant getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(Instant timestamp) {
		this.timestamp = timestamp;
	}

	public List<Card> getCards() {
		return cards;
	}

	public void setCards(List<Card> cards) {
		this.cards = cards;
	}

	public List<String> getPlayerIds() {
		return playerIds;
	}

	public void setPlayerIds(List<String> playerIds) {
		this.playerIds = playerIds;
	}

	public Integer getSlot() {
		return slot;
	}

	public void setSlot(Integer slot) {
		this.slot = slot;
	}

	public List<Float> getPots() {
		return pots;
	}

	public void setPots(List<Float> pots) {
		this.pots = pots;
	}
}
